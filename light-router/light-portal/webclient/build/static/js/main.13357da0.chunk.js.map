{"version":3,"sources":["actions/index.js","components/Home.js","components/Wallet.js","components/CurrencyBalance.js","components/CurrencySent.js","components/CurrencyTransaction.js","components/TokenCreated.js","components/TokenApproved.js","components/TokenTransferred.js","components/TokenWithdrawn.js","components/TokenInfo.js","components/TokenAccount.js","components/TokenTransaction.js","components/ResponsiveDrawer.js","data/Forms.js","components/Form.js","App.js","serviceWorker.js","reducers/WalletReducer.js","reducers/CurrencyReducer.js","reducers/FormReducer.js","reducers/index.js","index.js"],"names":["SUBMIT_FORM_STARTED","SUBMIT_FORM_SUCCESS","SUBMIT_FORM_FAILURE","Home","console","log","this","props","_this$props","toggleButton","toggleButtonAction","react_default","a","createElement","href","Button_default","color","variant","onClick","Component","connect","state","Object","objectSpread","wallet","type","Wallet","result","form","JSON","stringify","error","react","CurrencyBalance","CurrencySent","CurrencyTransaction","_this","classes","Paper_default","className","root","Table_default","table","TableHead_default","TableRow_default","TableCell_default","numeric","TableBody_default","map","row","key","id","component","scope","moment","utc","time","format","toAddress","address","value","data","withStyles","theme","width","marginTop","spacing","unit","overflowX","minWidth","TokenCreated","TokenApproved","TokenTransferred","TokenWithdrawn","TokenInfo","TokenAccount","TokenTransaction","ResponsiveDrawer","mobileOpen","handleDrawerToggle","setState","children","pathname","location","drawer","toolbar","Divider_default","MenuList_default","MenuItem_default","Link","to","selected","CssBaseline_default","AppBar_default","position","appBar","Toolbar_default","IconButton_default","aria-label","menuButton","Menu_default","Typography_default","noWrap","Hidden_default","smUp","implementation","Drawer_default","container","anchor","direction","open","onClose","paper","drawerPaper","ModalProps","keepMounted","xsDown","content","compose","withRouter","display","defineProperty","breakpoints","up","flexShrink","marginLeft","concat","marginRight","mixins","flexGrow","padding","withTheme","forms","currencyBalanceForm","formId","actions","host","service","action","version","title","success","schema","required","properties","currencyTransactionForm","currency","enum","currencySendForm","password","amount","walletCreateForm","passwordConfirm","region","description","titleMap","name","tokenCreateForm","symbol","totalSupply","decimals","tokenTransferForm","tokenAddressOrSymbol","tokenApproveForm","tokenWithdrawForm","fromAddress","tokenInfoForm","tokenAccountForm","tokenTransactionForm","Form","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onModelChange","val","utils","selectOrSet","model","fetching","nextProps","nextState","nextContext","match","params","formData","validationResult","validateBySchema","valid","submitForm","message","_this2","wait","item","index","boundButtonClick","onButtonClick","bind","push","button","CircularProgress_default","progress","SchemaForm_default","dispatch","_ref3","asyncToGenerator","regenerator_default","mark","_callee3","request","response","wrap","_context3","prev","next","method","headers","Accept","Content-Type","body","fetch","sent","json","payload","history","t0","toString","stop","_x3","apply","arguments","flexWrap","formControl","margin","selectEmpty","createBrowserHistory","App","currencyMap","undefined","transactions","handleChange","event","target","getBalance","_callee","e","api_call","_context","preventDefault","postFaucet","_callee2","settings","_context2","getTransaction","Router","components_ResponsiveDrawer","Switch","Route","exact","path","Boolean","window","hostname","initialState","combineReducers","length","balance","createMuiTheme","typography","useNextVariants","store","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","render","es","core_styles","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13357da0.chunk.js","sourcesContent":["import {history} from '../App';\nexport const GET_BALANCE = 'GET_BALANCE';\nexport const GET_BALANCE_SUCCESS = 'GET_BALANCE_SUCCESS';\nexport const GET_BALANCE_FAILURE = 'GET_BALANCE_FAILURE';\nexport const ADDRESS_FIELD_CHANGED = 'ADDRESS_FIELD_CHANGED';\n\nexport const POST_FAUCET = 'POST_FAUCET';\nexport const POST_FAUCET_SUCCESS = 'POST_FAUCET_SUCCESS';\nexport const POST_FAUCET_FAILURE = 'POST_FAUCET_FAILURE';\n\nexport const TOGGLE_BUTTON_ACTION = 'TOGGLE_BUTTON_ACTION';\n\nexport const SUBMIT_FORM_STARTED = 'SUBMIT_FORM_STARTED';\nexport const SUBMIT_FORM_SUCCESS = 'SUBMIT_FORM_SUCCESS';\nexport const SUBMIT_FORM_FAILURE = 'SUBMIT_FORM_FAILURE';\n\nexport function getBalance(address) {\n    console.log(address);\n    return async (dispatch) => {\n        try {\n            if(address == null || address.length === 0) {\n                console.log('dispatch error address is empty');\n                dispatch({type: GET_BALANCE_FAILURE, payload: 'Address is empty'})\n            } else {\n                const response = await fetch(`/faucet/${address}`);\n                const data = await response.json();\n                console.log(\"data\", data);\n                dispatch({ type: 'GET_BALANCE_SUCCESS', payload: data.taiji })\n            }\n        }\n        catch(e) {\n            dispatch({ type: 'GET_BALANCE_FAILURE', payload: e.toString() })\n        }\n    }\n}\n\nexport function postFaucet(address, currency, amount, unit) {\n    return async (dispatch) => {\n        const request = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                amount: amount,\n                currency: currency,\n                unit: unit\n            })\n        };\n\n        try {\n            const response = await fetch(`/faucet/${address}.json`, request);\n            const data = await response.json();\n            console.log(\"data\", data);\n            dispatch({ type: 'POST_FAUCET_SUCCESS', payload: data })\n        }\n        catch(e) {\n            console.log(\"error \" + e.toString());\n            dispatch({ type: 'POST_FAUCET_FAILURE', error: e.toString()})\n        }\n    }\n}\n\nexport const toggleButtonAction = () => {\n    return {\n        type: 'TOGGLE_BUTTON_ACTION'\n    }\n};\n\nexport const handleAddressChange = event => {\n    return {\n         type: 'ADDRESS_FIELD_CHANGED',\n         payload: event.target.value\n     };\n};\n\nexport function submitForm(action) {\n    return async (dispatch) => {\n        dispatch({type: SUBMIT_FORM_STARTED});\n        const request = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(action)\n        };\n        console.log(request);\n        try {\n            const response = await fetch('/api/webclient', request);\n            const data = await response.json();\n            console.log(\"data\", data);\n            dispatch({ type: SUBMIT_FORM_SUCCESS, payload: data });\n            history.push(action.success);\n        } catch(e) {\n            console.log(\"error \" + e.toString());\n            dispatch({ type: SUBMIT_FORM_FAILURE, error: e.toString()})\n        }\n    }\n}\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { toggleButtonAction } from \"../actions\";\nimport Button from '@material-ui/core/Button';\n\nclass Home extends Component {\n    render() {\n        console.log(this.props);\n        const { toggleButton, toggleButtonAction } = this.props;\n        return (\n            <div>\n                <pre>\n                    This is the faucet for the testnet. Please first create an address by following the <a href=\"https://doc.taiji.io/getting-started/\">getting started guide</a> and come here to populate up to 1000 TAIJI coins per day.\n                </pre>\n                <pre>\n                    To learn more about the Taiji Blockchain, please visit <a href=\"https://doc.taiji.io/\">doc.taiji.io</a>, <a href=\"https://github.com/networknt/taiji-blockchain\">taiji-blockchain</a> and <a href=\"https://github.com/taiji-chain\">taiji-chain organization</a>.\n                </pre>\n                <pre>\n                    If you have questions or want to discuss the features, please visit <a href=\"https://gitter.im/networknt/taiji-blockchain\">gitter room</a> or <a href=\"https://www.reddit.com/r/TaijiChain/\">TaijiChain Reddit</a>.\n                </pre>\n                <div>{ toggleButton? \"I am set to true\" : \"I am set to false\"} </div>\n                <div><Button color=\"primary\" variant=\"contained\" onClick={toggleButtonAction}>Change Store State</Button></div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    ...state.wallet\n});\nexport default connect(\n    mapStateToProps,\n    {\n        toggleButtonAction\n    }\n)(Home);","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass Wallet extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div><pre>{JSON.stringify(this.props.form.result, null, 2) }</pre></div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(Wallet);\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass CurrencyBalance extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div>The balance of TAIJI is {this.props.form.result['taiji']} in SHELL</div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n             </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(CurrencyBalance);\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass CurrencySent extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div><pre>{JSON.stringify(this.props.form.result, null, 2) }</pre></div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(CurrencySent);\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport Paper from \"@material-ui/core/Paper/Paper\";\nimport Table from \"@material-ui/core/Table/Table\";\nimport TableHead from \"@material-ui/core/TableHead/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody/TableBody\";\nimport moment from \"moment\";\nimport {withStyles} from \"@material-ui/core\";\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 700,\n    },\n});\n\nclass CurrencyTransaction extends Component {\n\n    render() {\n        const { classes } = this.props;\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = (\n                <Paper className={classes.root}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell numeric>TxId</TableCell>\n                                <TableCell>Time</TableCell>\n                                <TableCell>ToAddress</TableCell>\n                                <TableCell numeric>Amount in SHELL</TableCell>\n                                <TableCell>Data</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.props.form.result.map(row => {\n                                return (\n                                    <TableRow key={row.id}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {row.id}\n                                        </TableCell>\n                                        <TableCell>{moment.utc(row.time).format()}</TableCell>\n                                        <TableCell>{row.toAddress}</TableCell>\n                                        <TableCell numeric>{this.props.address === row.toAddress? '+' + row.value : '-' + row.value}</TableCell>\n                                        <TableCell>{row.data}</TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            )\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(withStyles(styles)(CurrencyTransaction));\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass TokenCreated extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div><pre>{JSON.stringify(this.props.form.result, null, 2) }</pre></div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(TokenCreated);\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass TokenApproved extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div><pre>{JSON.stringify(this.props.form.result, null, 2) }</pre></div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(TokenApproved);\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass TokenTransferred extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div><pre>{JSON.stringify(this.props.form.result, null, 2) }</pre></div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(TokenTransferred);\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass TokenWithdrawn extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div><pre>{JSON.stringify(this.props.form.result, null, 2) }</pre></div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(TokenWithdrawn);\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass TokenInfo extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div><pre>{JSON.stringify(this.props.form.result, null, 2) }</pre></div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(TokenInfo);\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass TokenAccount extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div><pre>{JSON.stringify(this.props.form.result, null, 2) }</pre></div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(TokenAccount);\n","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nclass TokenTransaction extends Component {\n\n    render() {\n        console.log(this.props.form.result);\n        let result;\n        if(this.props.form.result) {\n            result = <div><pre>{JSON.stringify(this.props.form.result, null, 2) }</pre></div>\n        } else {\n            if(this.props.error) {\n                console.log('error is not empty');\n                result = <div>Error: {this.props.form.error}</div>\n            } else {\n                result = ''\n            }\n        }\n        return (\n            <Fragment>\n                {result}\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\n\nexport default connect(\n    mapStateToProps\n)(TokenTransaction);\n","import React, {Component} from 'react';\nimport {Link, withRouter} from 'react-router-dom';\nimport {compose} from 'recompose';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport MenuList from '@material-ui/core/MenuList';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Hidden from '@material-ui/core/Hidden';\nimport Divider from '@material-ui/core/Divider';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    drawer: {\n        [theme.breakpoints.up('sm')]: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n    },\n    appBar: {\n        marginLeft: drawerWidth,\n        [theme.breakpoints.up('sm')]: {\n            width: `calc(100% - ${drawerWidth}px)`,\n        },\n    },\n    menuButton: {\n        marginRight: 20,\n        [theme.breakpoints.up('sm')]: {\n            display: 'none',\n        },\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing.unit * 3,\n    },\n});\n\n\nclass ResponsiveDrawer extends Component {\n    state = {\n        mobileOpen: false,\n    };\n\n    handleDrawerToggle = () => {\n        this.setState(state => ({ mobileOpen: !state.mobileOpen }));\n    };\n\n    render() {\n        const { classes, children, location: { pathname }, theme } = this.props;\n        const drawer = (\n            <div>\n                <div className={classes.toolbar} />\n                <Divider />\n                <MenuList>\n                    <MenuItem component={Link} to=\"/\" selected={'/' === pathname}>\n                        Home\n                    </MenuItem>\n                    <Divider />\n                    <MenuItem component={Link} to=\"/form/walletCreateForm\" selected={'/form/walletCreateForm' === pathname}>\n                        Create Wallet\n                    </MenuItem>\n                    <Divider />\n                    <MenuItem component={Link} to=\"/form/currencySendForm\" selected={'/form/currencySendForm' === pathname}>\n                        Send Currency\n                    </MenuItem>\n                    <MenuItem component={Link} to=\"/form/currencyBalanceForm\" selected={'/form/currencyBalanceForm' === pathname}>\n                        Currency Balance\n                    </MenuItem>\n                    <MenuItem component={Link} to=\"/form/currencyTransactionForm\" selected={'/form/currencyTransactionForm' === pathname}>\n                        Currency Transaction\n                    </MenuItem>\n                    <Divider />\n                    <MenuItem component={Link} to=\"/form/tokenCreateForm\" selected={'/form/tokenCreateForm' === pathname}>\n                        Create Token\n                    </MenuItem>\n                    <MenuItem component={Link} to=\"/form/tokenWithdrawForm\" selected={'/form/tokenWithdrawForm' === pathname}>\n                        Withdraw Token\n                    </MenuItem>\n                    <MenuItem component={Link} to=\"/form/tokenTransferForm\" selected={'/form/tokenTransferForm' === pathname}>\n                        Transfer Token\n                    </MenuItem>\n                    <MenuItem component={Link} to=\"/form/tokenApproveForm\" selected={'/form/tokenApproveForm' === pathname}>\n                        Approve Token\n                    </MenuItem>\n                    <MenuItem component={Link} to=\"/form/tokenInfoForm\" selected={'/form/tokenInfoForm' === pathname}>\n                        Token Info\n                    </MenuItem>\n                    <MenuItem component={Link} to=\"/form/tokenAccountForm\" selected={'/form/tokenAccountForm' === pathname}>\n                        Token Account\n                    </MenuItem>\n                    <MenuItem component={Link} to=\"/form/tokenTransactionForm\" selected={'/form/tokenTransactionForm' === pathname}>\n                        Token Transaction\n                    </MenuItem>\n                </MenuList>\n            </div>\n        );\n\n        return (\n            <div className={classes.root}>\n                <CssBaseline />\n                <AppBar position=\"fixed\" className={classes.appBar}>\n                    <Toolbar>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"Open drawer\"\n                            onClick={this.handleDrawerToggle}\n                            className={classes.menuButton}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                            Taiji Blockchain - Testnet\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <nav className={classes.drawer}>\n                    {/* The implementation can be swap with js to avoid SEO duplication of links. */}\n                    <Hidden smUp implementation=\"css\">\n                        <Drawer\n                            container={this.props.container}\n                            variant=\"temporary\"\n                            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                            open={this.state.mobileOpen}\n                            onClose={this.handleDrawerToggle}\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                            ModalProps={{\n                                keepMounted: true, // Better open performance on mobile.\n                            }}\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                    <Hidden xsDown implementation=\"css\">\n                        <Drawer\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                            variant=\"permanent\"\n                            open\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                </nav>\n                <main className={classes.content}>\n                    <div className={classes.toolbar} />\n                    {children}\n                </main>\n            </div>\n        );\n    }\n}\n\n\nResponsiveDrawer.propTypes = {\n    classes: PropTypes.object.isRequired,\n    // Injected by the documentation to work in an iframe.\n    // You won't need it on your project.\n    container: PropTypes.object,\n    theme: PropTypes.object.isRequired,\n};\n\nexport default compose (\n    withRouter,\n    withStyles(styles, { withTheme: true })\n)(ResponsiveDrawer);\n","export const forms = {\n    currencyBalanceForm: {\n        formId: 'currencyBalanceForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'currency',\n                action: 'balance',\n                version: '1.0.0',\n                title: 'Balance',\n                success: '/currencyBalance'\n            }\n        ],\n        schema: {\n            type: 'object',\n            required: [\n                'address'\n            ],\n            title: 'Currency Balance',\n            properties: {\n                address: {\n                    title: 'Address',\n                    type: 'string'\n                }\n            }\n        },\n        form: [\n            '*'\n        ]\n    },\n    currencyTransactionForm: {\n        formId: 'currencyTransactionForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'currency',\n                action: 'transaction',\n                version: '1.0.0',\n                title: 'Transaction',\n                success: '/currencyTransaction'\n            }\n        ],\n        schema: {\n            type: 'object',\n            required: [\n                'address',\n                'currency'\n            ],\n            title: 'Currency Transaction',\n            properties: {\n                address: {\n                    title: 'Address',\n                    type: 'string'\n                },\n                currency: {\n                    title: 'Currency',\n                    type: 'string',\n                    enum: ['taiji']\n                }\n            }\n        },\n        form: [\n            '*'\n        ]\n    },\n    currencySendForm: {\n        formId: 'currencySendForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'currency',\n                action: 'send',\n                version: '1.0.0',\n                title: 'Balance',\n                success: '/currencySent'\n            }\n        ],\n        schema: {\n            type: 'object',\n            required: [\n                'currency',\n                'address',\n                'password',\n                'toAddress',\n                'amount',\n                'unit'\n            ],\n            title: 'Currency Send',\n            properties: {\n                currency: {\n                    title: 'Currency',\n                    type: 'string',\n                    enum: ['taiji']\n                },\n                address: {\n                    title: 'Address',\n                    type: 'string'\n                },\n                password: {\n                    title: 'Password',\n                    type: 'string'\n                },\n                toAddress: {\n                    title: 'To Address',\n                    type: 'string'\n                },\n                amount: {\n                    title: 'Amount',\n                    type: 'string',\n                },\n                unit: {\n                    title: 'Unit',\n                    type: 'string',\n                    enum: ['SHELL', 'KSHELL', 'MSHELL', 'TAIJI', 'KTAIJI', 'MTAIJI']\n                }\n            }\n        },\n        form: [\n            'currency',\n            'address',\n            {\n                key: 'password',\n                type: 'password'\n            },\n            'toAddress',\n            'amount',\n            'unit'\n        ]\n    },\n    walletCreateForm: {\n        formId: 'walletCreateForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'wallet',\n                action: 'create',\n                version: '1.0.0',\n                title: 'Wallet',\n                success: '/wallet'\n            }\n        ],\n        schema: {\n            type: 'object',\n            required: [\n                'password',\n                'passwordConfirm',\n                'region'\n            ],\n            title: 'Create Wallet',\n            properties: {\n                password: {\n                    title: 'Password',\n                    type: 'string'\n                },\n                passwordConfirm: {\n                    title: 'Password Confirmation',\n                    type: 'string'\n                },\n                region: {\n                    title: 'Region',\n                    type: 'string',\n                    enum: [\n                        \"0000\", \"0001\", \"0002\"\n                    ]\n                }\n            }\n        },\n        form: [\n            {\n                type: 'help',\n                description: 'Please be aware that it takes up to 3 minutes to get the wallet generated.',\n                variant: 'h6',\n                color: 'secondary'\n            },\n            {\n                key: 'password',\n                type: 'password'\n            },\n            {\n                key: 'passwordConfirm',\n                type: 'password'\n            },\n            {\n                key: 'region',\n                type: 'select',\n                titleMap: [\n                    {\n                        value: '0000',\n                        name: 'Americas'\n                    },\n                    {\n                        value: '0001',\n                        name: 'Asia, Oceania'\n                    },\n                    {\n                        value: '0002',\n                        name: 'Europe, Africa'\n                    }\n                ]\n            }\n        ]\n    },\n    tokenCreateForm: {\n        formId: 'tokenCreateForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'token',\n                action: 'create',\n                version: '1.0.0',\n                title: 'Token',\n                success: '/tokenCreated'\n            }\n        ],\n        schema: {\n            type: 'object',\n            required: [\n                'currency',\n                'address',\n                'password',\n                'name',\n                'symbol',\n                'totalSupply',\n                'decimals'\n            ],\n            title: 'Create Token',\n            properties: {\n                currency: {\n                    title: 'Currency',\n                    type: 'string',\n                    enum: ['taiji']\n                },\n                address: {\n                    title: 'Address',\n                    type: 'string'\n                },\n                password: {\n                    title: 'Password',\n                    type: 'string'\n                },\n                name: {\n                    title: 'Token Name',\n                    type: 'string'\n                },\n                symbol: {\n                    title: 'Symbol',\n                    type: 'string'\n                },\n                totalSupply: {\n                    title: 'Total Supply',\n                    type: 'string'\n                },\n                decimals: {\n                    title: 'Decimals',\n                    type: 'string'\n                }\n            }\n        },\n        form: [\n            {\n                type: 'help',\n                description: 'Please be aware that it takes up to 3 minutes to get the token generated.',\n                variant: 'h6',\n                color: 'secondary'\n            },\n            'currency',\n            'address',\n            {\n                key: 'password',\n                type: 'password'\n            },\n            'name',\n            'symbol',\n            'totalSupply',\n            'decimals'\n        ]\n    },\n    tokenTransferForm: {\n        formId: 'tokenTransferForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'token',\n                action: 'transfer',\n                version: '1.0.0',\n                title: 'Token',\n                success: '/tokenTransferred'\n            }\n        ],\n        schema: {\n            type: 'object',\n            required: [\n                'address',\n                'password',\n                'tokenAddressOrSymbol',\n                'toAddress',\n                'amount'\n            ],\n            title: 'Transfer Token',\n            properties: {\n                address: {\n                    title: 'Address',\n                    type: 'string'\n                },\n                password: {\n                    title: 'Password',\n                    type: 'string'\n                },\n                tokenAddressOrSymbol: {\n                    title: 'Token Address or Symbol',\n                    type: 'string'\n                },\n                toAddress: {\n                    title: 'To Address',\n                    type: 'string'\n                },\n                amount: {\n                    title: 'Amount',\n                    type: 'string'\n                }\n            }\n        },\n        form: [\n            'address',\n            {\n                key: 'password',\n                type: 'password'\n            },\n            'tokenAddressOrSymbol',\n            'toAddress',\n            'amount'\n        ]\n    },\n    tokenApproveForm: {\n        formId: 'tokenApproveForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'token',\n                action: 'approve',\n                version: '1.0.0',\n                title: 'Token',\n                success: '/tokenApproved'\n            }\n        ],\n        schema: {\n            type: 'object',\n            required: [\n                'address',\n                'password',\n                'tokenAddressOrSymbol',\n                'toAddress',\n                'amount'\n            ],\n            title: 'Approve Token',\n            properties: {\n                address: {\n                    title: 'Address',\n                    type: 'string'\n                },\n                password: {\n                    title: 'Password',\n                    type: 'string'\n                },\n                tokenAddressOrSymbol: {\n                    title: 'Token Address or Symbol',\n                    type: 'string'\n                },\n                toAddress: {\n                    title: 'To Address',\n                    type: 'string'\n                },\n                amount: {\n                    title: 'Amount',\n                    type: 'string'\n                }\n            }\n        },\n        form: [\n            \"address\",\n            {\n                key: 'password',\n                type: 'password'\n            },\n            \"tokenAddressOrSymbol\",\n            \"toAddress\",\n            \"amount\"\n        ]\n    },\n    tokenWithdrawForm: {\n        formId: 'tokenWithdrawForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'token',\n                action: 'withdraw',\n                version: '1.0.0',\n                title: 'Token',\n                success: '/tokenWithdrawn'\n            }\n        ],\n        schema: {\n            type: 'object',\n            required: [\n                'address',\n                'password',\n                'tokenAddressOrSymbol',\n                'fromAddress',\n                'amount'\n            ],\n            title: 'Withdraw Token',\n            properties: {\n                address: {\n                    title: 'Address',\n                    type: 'string'\n                },\n                password: {\n                    title: 'Password',\n                    type: 'string'\n                },\n                tokenAddressOrSymbol: {\n                    title: 'Token Address or Symbol',\n                    type: 'string'\n                },\n                fromAddress: {\n                    title: 'From Address',\n                    type: 'string'\n                },\n                amount: {\n                    title: 'Amount',\n                    type: 'string'\n                }\n            }\n        },\n        form: [\n            'address',\n            {\n                key: 'password',\n                type: 'password'\n            },\n            'tokenAddressOrSymbol',\n            'fromAddress',\n            'amount'\n        ]\n    },\n    tokenInfoForm: {\n        formId: 'tokenInfoForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'token',\n                action: 'info',\n                version: '1.0.0',\n                title: 'Token',\n                success: '/tokenInfo'\n            }\n        ],\n        schema: {\n            type: 'object',\n            title: 'Token Info',\n            properties: {\n                tokenAddressOrSymbol: {\n                    title: 'Token Address or Symbol',\n                    type: 'string'\n                }\n            }\n        },\n        form: [\n            '*'\n        ]\n    },\n    tokenAccountForm: {\n        formId: 'tokenAccountForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'token',\n                action: 'account',\n                version: '1.0.0',\n                title: 'Token',\n                success: '/tokenAccount'\n            }\n        ],\n        schema: {\n            type: 'object',\n            title: 'Token Account',\n            properties: {\n                address: {\n                    title: 'Address',\n                    type: 'string'\n                },\n                symbol: {\n                    title: 'Symbol',\n                    type: 'string'\n                }\n            },\n            required: [\n                'address'\n            ]\n        },\n        form: [\n            '*'\n        ]\n    },\n    tokenTransactionForm: {\n        formId: 'tokenTransactionForm',\n        actions: [\n            {\n                host: 'taiji.io',\n                service: 'token',\n                action: 'transaction',\n                version: '1.0.0',\n                title: 'Token',\n                success: '/tokenTransaction'\n            }\n        ],\n        schema: {\n            type: 'object',\n            title: 'Token Transaction',\n            properties: {\n                address: {\n                    title: 'Address',\n                    type: 'string'\n                },\n                symbol: {\n                    title: 'Symbol',\n                    type: 'string'\n                }\n            },\n            required: [\n                'address'\n            ]\n        },\n        form: [\n            '*'\n        ]\n    },\n\n};\n\n","import React, {Component} from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { submitForm} from \"../actions\";\nimport connect from \"react-redux/es/connect/connect\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport SchemaForm from 'react-schema-form/lib/SchemaForm';\nimport utils from 'react-schema-form/lib/utils';\nimport {forms} from '../data/Forms';\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    formControl: {\n        margin: theme.spacing.unit,\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing.unit * 2,\n    },\n    progress: {\n        margin: theme.spacing.unit * 2,\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n});\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fetching: false,\n            error: null,\n            formId: null,\n            schema: null,\n            form: null,\n            actions: null,\n            model: {}\n        }\n    }\n\n    componentWillUpdate(nextProps, nextState, nextContext) {\n        if(this.state.formId !== nextProps.match.params.formId) {\n            let formData = forms[this.props.match.params.formId];\n            this.setState({\n                formId: nextProps.match.params.formId,\n                schema: formData.schema,\n                form: formData.form,\n                actions: formData.actions,\n                model: formData.model || {}\n            });\n        }\n    }\n\n    componentDidMount() {\n        let formData = forms[this.props.match.params.formId];\n        this.setState({\n            formId: this.props.match.params.formId,\n            schema: formData.schema,\n            form: formData.form,\n            actions: formData.actions,\n            model: formData.model || {}\n        });\n    }\n\n    onModelChange = (key, val) => {\n        //console.log(this.state.model);\n        utils.selectOrSet(key, this.state.model, val);\n    };\n\n    onButtonClick(action) {\n        console.log(action, this.state.model);\n        let validationResult = utils.validateBySchema(this.state.schema, this.state.model);\n        if(!validationResult.valid) {\n            this.setState({error: validationResult.error.message});\n        } else {\n            action.data = this.state.model;\n            this.setState({success: action.success, fetching: true});\n            this.props.submitForm(action);\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        //console.log(this.state.actions);\n        if(this.state.schema) {\n            var actions = [];\n            this.state.actions.map((item, index) => {\n                let boundButtonClick = this.onButtonClick.bind(this, item);\n                actions.push(<Button variant=\"contained\" className={classes.button} color=\"primary\" key={index} onClick={boundButtonClick}>{item.title}</Button>)\n            });\n            let wait;\n            if(this.state.fetching) {\n                //console.log('fetching is true');\n                wait = <div><CircularProgress className={classes.progress} /></div>;\n            } else {\n                //console.log(\"fetching is false\");\n                wait = <div></div>;\n            }\n            let title = <h2>{this.state.schema.title}</h2>\n\n            return (\n                <div>\n                    {wait}\n                    {title}\n                    <SchemaForm schema={this.state.schema} form={this.state.form} model={this.state.model} onModelChange={this.onModelChange} />\n                    <pre>{this.state.error}</pre>\n                    {actions}\n                </div>\n            )\n        } else {\n            return (<CircularProgress className={classes.progress} />);\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n});\n\nconst mapDispatchToProps = dispatch => ({\n    submitForm: action => dispatch(submitForm(action))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles)(Form));\n","import React, {Component} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport { Router } from 'react-router';\nimport createBrowserHistory from 'history/createBrowserHistory'\nimport Home from './components/Home';\nimport Wallet from './components/Wallet';\nimport CurrencyBalance from './components/CurrencyBalance';\nimport CurrencySent from './components/CurrencySent';\nimport CurrencyTransaction from './components/CurrencyTransaction';\nimport TokenCreated from './components/TokenCreated';\nimport TokenApproved from './components/TokenApproved';\nimport TokenTransferred from './components/TokenTransferred';\nimport TokenWithdrawn from './components/TokenWithdrawn';\nimport TokenInfo from './components/TokenInfo';\nimport TokenAccount from './components/TokenAccount';\nimport TokenTransaction from './components/TokenTransaction';\nimport ResponsiveDrawer from './components/ResponsiveDrawer';\nimport Form from './components/Form';\n\nexport const history = createBrowserHistory();\n\nclass App extends Component {\n\n    state = {\n        address: '',\n        amount: '',\n        currency: 'taiji',\n        unit: 'TAIJI',\n        currencyMap: undefined,\n        transactions: undefined\n    };\n\n    handleChange = name => event => {\n        //console.log(name, event.target.value);\n        this.setState({\n            [name]: event.target.value,\n        });\n    };\n\n    getBalance = async (e) => {\n        e.preventDefault();\n        //console.log('address', this.state.address);\n        const api_call = await fetch(`/faucet/${this.state.address}`);\n        const data = await api_call.json();\n        //console.log(data);\n        if (data) {\n            this.setState({\n                currencyMap: data\n            });\n        } else {\n            this.setState({\n                currencyMap: undefined\n            });\n        }\n    };\n\n    postFaucet = async (e) => {\n        e.preventDefault();\n        const settings = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                amount: this.state.amount,\n                currency: this.state.currency,\n                unit: this.state.unit\n            })\n        };\n\n        const api_call = await fetch(`/faucet/${this.state.address}`, settings)\n        const data = await api_call.json();\n        if (data) {\n            this.setState({\n                currencyMap: data\n            });\n        } else {\n            this.setState({\n                currencyMap: undefined\n            });\n        }\n    };\n\n    getTransaction = async (e) => {\n        e.preventDefault();\n        const api_call = await fetch(`/faucet/${this.state.address}/${this.state.currency}`);\n        const data = await api_call.json();\n        //console.log(data);\n        if (data) {\n            this.setState({\n                transactions: data\n            });\n        } else {\n            this.setState({\n                transactions: undefined\n            });\n        }\n    };\n\n\n    render() {\n        return (\n            <Router history={history}>\n                <ResponsiveDrawer>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route path=\"/form/:formId\" component={Form} />\n                        <Route path=\"/currencyBalance\" component={CurrencyBalance} />\n                        <Route path=\"/wallet\" component={Wallet} />\n                        <Route path=\"/currencySent\" component={CurrencySent} />\n                        <Route path=\"/currencyTransaction\" component={CurrencyTransaction} />\n                        <Route path=\"/tokenCreated\" component={TokenCreated} />\n                        <Route path=\"/tokenApproved\" component={TokenApproved} />\n                        <Route path=\"/tokenWithdrawn\" component={TokenWithdrawn} />\n                        <Route path=\"/tokenTransferred\" component={TokenTransferred} />\n                        <Route path=\"/tokenInfo\" component={TokenInfo} />\n                        <Route path=\"/tokenAccount\" component={TokenAccount} />\n                        <Route path=\"/tokenTransaction\" component={TokenTransaction} />\n                    </Switch>\n                </ResponsiveDrawer>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    toggleButton: false\n};\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'TOGGLE_BUTTON_ACTION':\n            return {\n                ...state,\n                toggleButton: !state.toggleButton\n            };\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    address: ''\n};\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADDRESS_FIELD_CHANGED':\n            return {\n                ...state,\n                address: action.payload\n            };\n        case 'GET_BALANCE_SUCCESS':\n            return {\n                ...state,\n                balance: action.payload\n            };\n        case 'GET_BALANCE_FAILURE':\n            return {\n                ...state,\n                error: action.payload\n            };\n\n        default:\n            return state;\n    }\n}\n","import {SUBMIT_FORM_STARTED, SUBMIT_FORM_FAILURE, SUBMIT_FORM_SUCCESS} from \"../actions\";\n\nconst initialState = {};\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SUBMIT_FORM_SUCCESS:\n            return {\n                ...state,\n                fetching: false,\n                result: action.payload\n            };\n        case SUBMIT_FORM_FAILURE:\n            return {\n                ...state,\n                fetching: false,\n                error: action.payload\n            };\n        case SUBMIT_FORM_STARTED:\n            return {\n                ...state,\n                fetching: true\n            };\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport WalletReducer from './WalletReducer';\nimport CurrencyReducer from \"./CurrencyReducer\";\nimport FormReducer from \"./FormReducer\";\n\nexport default combineReducers({\n    wallet: WalletReducer,\n    currency: CurrencyReducer,\n    form: FormReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <MuiThemeProvider theme={theme}>\n            <App />\n        </MuiThemeProvider>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}